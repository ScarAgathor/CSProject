//Add a description here and other stuff

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_FLIGHTS 100
#define MAX_STR_LEN 50

#define PRICE_PER_MILE 0.94

typedef struct {//use to add characteristic to the flights
    int flightId;
    char origin[100];
    char destination[100];
    char typeOfFlight[100];
    int hrs;
    int miles;
    float price;
} Flight;

void getUserType(int* userType);
void displayMenu(int userType);
void selectOption(int userType, int option);
void addFlights(Flight flights[], int *num_flights);
void editFlights(Flight flights[], int *num_flights);
void deleteFlights(Flight flights[], int *num_flights);
void searchFlights(Flight flights[], int *num_flights);
void readFlightsFromFile(Flight flights[], int *num_flights);
void writeFlightsToFile(Flight flights[], int *num_flights);
void appendFlightsToFile(Flight flights[], int *num_flights);
void printFlights(Flight flights[], int *num_flights);

int main() {
    int userType = 0;
    
    getUserType(&userType);
    displayMenu(userType);


    return 0;
}

void getUserType(int* userType) {
    printf("Please Enter Your User Type\n");
    printf("1 - Agent\n");
    printf("2 - Customer\n");
    printf("UserType: ");
    scanf("%d", userType);
}

//Add more options later
void displayMenu(int userType) {
    int option;
    do{
        switch (userType)
        {
        case 1: //Agent
            printf("Main Menu\n");
            printf("Hello Agent.\n");
            printf("Main Menu Options:\n"); //Add more options later
            printf("1. Add Flights\n");
            printf("2. Edit Flights\n");
            printf("3. Delete Flights\n");
            printf("4. Quit\n");
            printf("Please Select an Option: ");
            scanf("%d", &option);
            selectOption(userType, option);
            break;
        case 2: //Customer
            printf("Main Menu\n");
            printf("Hello Dear Customer.\n");
            printf("Main Menu Options:\n");  //Add more options later
            printf("1. Reserve Flights\n");
            printf("2. Edit Reserved Flights\n");
            printf("3. Complete Booking\n");
            printf("4. Quit\n");
            printf("Please Select an Option: ");
            scanf("%d", &option);
            selectOption(userType, option);
            break;
        default:
            while(userType != 1 && userType != 2) {
                printf("You Entered an Invalid option\n");
                getUserType(&userType);
                displayMenu(userType);
            }
            break;
        }
    } while (option < 4);
}

void selectOption(int userType, int option) {
    Flight flights[MAX_FLIGHTS];
    int num_flights = 0;
    if(userType == 1) { //Agent
        switch (option) {
        case 1:
            printf("Add Flights\n");
            addFlights(flights, &num_flights);
            break;
        case 2: 
            printf("Edit Available Flights");
            editFlights(flights, &num_flights);
            break;
        case 3: 
            printf("Delete Available Flights");
            deleteFlights(flights, &num_flights);
            break;
        }
    }
    if(userType == 2) { //Customer
        switch (option) {
        case 1:
            printf("Reserve Available Flights");
            searchFlights(flights, &num_flights);
           // reserveFlights
            break;
        //case 1:
            //searchFlights(flights, &num_flights);
            //break;
            //user will use delete flights function

        }
    }
}

void addFlights(Flight flights[], int *num_flights) {

    char filename[] = "flights.txt";
    FILE *file = fopen(filename, "r");

    int currentMaxFlightId;

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    char line[100];
    while (fgets(line, sizeof(line), file) != NULL) {
        (currentMaxFlightId)++;
    }
    fclose(file);

    char origin[100];
    char destination[100];
    char typeOfFlight[100];
    int hrs;
    int miles;
    float price;

    char decision[5];

    do
    {
        printf("Enter Origin: ");
        scanf("%s", origin);
        printf("Enter destination: ");
        scanf("%s", destination);
        printf("Enter type of flight: ");
        scanf("%s", typeOfFlight);
        printf("Enter hrs: ");
        scanf("%d", &hrs);
        printf("Enter miles: ");
        scanf("%d", &miles);

        flights[*num_flights].flightId = currentMaxFlightId + 1;
        strcpy(flights[*num_flights].origin, origin);
        strcpy(flights[*num_flights].destination, destination); 
        strcpy(flights[*num_flights].typeOfFlight, typeOfFlight);
        flights[*num_flights].hrs = hrs;
        flights[*num_flights].miles = miles;
        price = flights[*num_flights].miles * PRICE_PER_MILE; 
        flights[*num_flights].price = price;
        (*num_flights)++;

        printf("\nDo you wish to add another flight: ");
        scanf("%s", decision);

    }   while (strcmp(decision, "yes") == 0);
        
    // append flights data to the file
    appendFlightsToFile(flights, num_flights);
}

void editFlights(Flight flights[], int *num_flights) {
    readFlightsFromFile(flights, num_flights);
    printFlights(flights, num_flights);

    int editFlight;

    printf("Select Flight Id to Edit: ");
    scanf("%d", &editFlight);

    for(int i = 0; i < *num_flights; i++) {
        if(flights[i].flightId == editFlight) {
            char origin[MAX_STR_LEN];
            char destination[100];
            char typeOfFlight[100];
            int hrs;
            int miles;
            float price;

            printf("Enter Origin: ");
            scanf("%s", origin);
            printf("Enter destination: ");
            scanf("%s", destination);
            printf("Enter type of flight: ");
            scanf("%s", typeOfFlight);
            printf("Enter hrs: ");
            scanf("%d", &hrs);
            printf("Enter miles: ");
            scanf("%d", &miles);

            flights[i].flightId = editFlight;
            strcpy(flights[i].origin, origin);
            strcpy(flights[i].destination, destination); 
            strcpy(flights[i].typeOfFlight, typeOfFlight);
            flights[i].hrs = hrs;
            flights[i].miles = miles;
            price = flights[i].miles * PRICE_PER_MILE; 
            flights[i].price = price;
        }
    }

    printFlights(flights, num_flights);
    writeFlightsToFile(flights, num_flights);
}

void deleteFlights(Flight flights[], int *num_flights) {
    readFlightsFromFile(flights, num_flights);
    printFlights(flights, num_flights);

    int deleteFlight;

    printf("Select Flight Id to Delete: ");
    scanf("%d", &deleteFlight);

    for(int i = 0; i < *num_flights; i++) {
        if(flights[i].flightId == deleteFlight) {
            for(int j = i; j < *num_flights; j++) {
                flights[j].flightId = flights[j].flightId;
                strcpy(flights[j].origin, flights[j+1].origin);
                strcpy(flights[j].destination, flights[j+1].destination); 
                strcpy(flights[j].typeOfFlight, flights[j+1].typeOfFlight);
                flights[j].hrs = flights[j+1].hrs;
                flights[j].miles = flights[j+1].miles;
                flights[j].price = flights[j+1].price;
            }
            *num_flights -= 1;
            
        }
    }

    printFlights(flights, num_flights);
    writeFlightsToFile(flights, num_flights);

}

void searchFlights(Flight flights[], int *num_flights) {
    readFlightsFromFile(flights, num_flights);

    Flight foundFlights[MAX_FLIGHTS];
    char userOrigin[10];
    char userDest[10];

    printf("\nEnter your origin: ");
    scanf("%s", userOrigin);
    printf("Enter your desired destination: ");
    scanf("%s", userDest);

    int num_found_flights = 0;

    for(int i = 0; i < *num_flights; i++) { //searching for flights that match the criteria and filling up thew found flights array
        if ((strcmp(flights[i].origin, userOrigin) == 0) || (strcmp(flights[i].destination, userDest) == 0)) {
            foundFlights[num_found_flights].flightId = num_found_flights + 1;
            strcpy(foundFlights[num_found_flights].origin, flights[i].origin);
            strcpy(foundFlights[num_found_flights].destination, flights[i].destination);
            strcpy(foundFlights[num_found_flights].typeOfFlight, flights[i].typeOfFlight);
            foundFlights[num_found_flights].hrs = flights[i].hrs;
            foundFlights[num_found_flights].miles = flights[i].miles;
            foundFlights[num_found_flights].price = flights[i].price;
            num_found_flights++;    
        }
    }    
     
    if(num_found_flights > 0) {
        printFlights(foundFlights, &num_found_flights);
    } else {
        printf("We apologize but the Flight you want is not available");
    }
}

void readFlightsFromFile(Flight flights[], int *num_flights) {
    char filename[] = "flights.txt";
    FILE *file = fopen(filename, "r");

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    char line[MAX_STR_LEN * 7]; //It is multiplied by the number of items in a line
    //The rest of this block breaks the line into different parts and puts them in flight array
    while (fgets(line, sizeof(line), file) != NULL && *num_flights < MAX_FLIGHTS) {
        char *token = strtok(line, ", ");
        flights[*num_flights].flightId = atoi(token);
        token = strtok(NULL, ", ");
        strncpy(flights[*num_flights].origin, token, MAX_STR_LEN - 1);
        token = strtok(NULL, ", ");
        strncpy(flights[*num_flights].destination, token, MAX_STR_LEN - 1);
        token = strtok(NULL, ", ");
        strncpy(flights[*num_flights].typeOfFlight, token, MAX_STR_LEN - 1);
        token = strtok(NULL, ", ");
        flights[*num_flights].hrs = atoi(token);
        token = strtok(NULL, ", ");
        flights[*num_flights].miles = atoi(token);
        token = strtok(NULL, ", ");
        flights[*num_flights].price = atof(token);
        (*num_flights)++;
    }
    fclose(file);
}

void writeFlightsToFile(Flight flights[], int *num_flights) {
    char filename[] = "flights.txt";
    FILE *file = fopen(filename, "w");

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    for (int i = 0; i < *num_flights; i++) {
        fprintf(file, "%d, %s, %s, %s, %d, %d, %.2f\n",flights[i].flightId , flights[i].origin ,flights[i].destination, flights[i].typeOfFlight, flights[i].hrs, flights[i].miles, flights[i].price);
    }
    fclose(file);
}

void appendFlightsToFile(Flight flights[], int *num_flights) {
    char filename[] = "flights.txt";
    FILE *file = fopen(filename, "a");

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    for (int i = 0; i < *num_flights; i++) {
        fprintf(file, "%d, %s, %s, %s, %d, %d, %.2f\n", flights[i].flightId, flights[i].origin, flights[i].destination, flights[i].typeOfFlight, flights[i].hrs, flights[i].miles, flights[i].price);
    }
    fclose(file);
}

void printFlights(Flight flights[], int *num_flights) {
    printf("\nId\tOrigin\tDestination\tFlight Type\tHours\tMiles\tPrice\n");//Printing a table of available flights
        for(int i = 0; i < *num_flights; i++) {
            printf("%d  | %s | %s | %s | %d | %d | $%.2f\n", flights[i].flightId,  flights[i].origin, flights[i].destination, flights[i].typeOfFlight, flights[i].hrs, flights[i].miles, flights[i].price);
        }
}


/* Potential List: Agent
1. Fix the looping issue so it doesn't go back to main menu immediately after add flights function.
*/

/* Potential List: customer
1. Make a new file to save the users selected flight or flights.
2. Fix the looping issue so it doesn't go back to main menu immediately after search flights function.
3. Add more options to do things  with the searched flights without having to go back to the main menu.
4. Add function in main menu for user to finalize what flight they want.
5. I think the search flights function should be part of a bunch of options called in the book flights option that may or may not execute after one another.
6. Add a function that allows user to book and save more than one flight.
7. add a function that allows flights to be marked as reserved or available.
8. Add a reserve flights option
9.for reserve function, decide btw giving found flights a new id or just using old id.
*/


