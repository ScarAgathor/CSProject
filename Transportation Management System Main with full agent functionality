//Add a description here and other stuff
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_FLIGHTS 100
#define MAX_STR_LEN 50
#define PRICE_PER_MILE 0.94

typedef struct {//This struct defines the characteristics of every flight.
    int flightId;
    char origin[100];
    char destination[100];
    char typeOfFlight[100];
    int hrs;
    int miles;
    float price;
} Flight;

void getUserType(int* userType);
void displayMenu(int userType);
void selectOption(int userType, int option);
void addFlights(Flight flights[], int *num_flights);
void editFlights(Flight flights[], int *num_flights);
void deleteFlights(Flight flights[], int *num_flights);
void searchFlights(Flight flights[], int *num_flights);
void reserveFlights(Flight flights[], int *num_flights);
void cancelReservations(Flight flights[], int *num_flights);
void printReceipts(Flight flights[], int *num_flights);
void readFlightsFromFile(Flight flights[], int *num_flights, char filename[]);
void writeFlightsToFile(Flight flights[], int *num_flights, char filename[]);
void appendFlightsToFile(Flight flights[], int *num_flights, char filename[]);
void printFlights(Flight flights[], int *num_flights);

int main() {
    int userType;
    getUserType(&userType);
    return 0;
}

void getUserType(int* userType) {//This function gets the type of user
    printf(" Please Enter Your User Type\n");
    printf(" 1 - Admin\n");
    printf(" 2 - Customer\n");
    printf(" UserType: ");
    scanf("%d", userType);
    if(*userType != 1 && *userType != 2) {
        printf(" You Entered an Invalid userType\n");
        getUserType(userType);
    } else {
        displayMenu(*userType);
    }
}

void displayMenu(int userType) {//This function displays the menu based ont he user and also controls the master loop of the program.
    int option;
    do{
        switch (userType)
        {
        case 1: //Admins main menu
            printf("\n|*******************************|\n");
            printf("|           Main Menu           |\n");
            printf("|*******************************|\n");
            printf("|    Hello Dear Admin,          |\n");
            printf("|                               |\n");
            printf("| Main Menu Options:            |\n"); //Options can be added and the quit option can easily adapt
            printf("| 1. Add FLights                |\n");
            printf("| 2. Edit Flights               |\n");
            printf("| 3. Delete Flights             |\n");
            printf("| 4. Quit                       |\n");
            printf("|                               |\n");
            printf("*********************************\n");
            printf("  Please Select an Option: ");
            scanf("%d", &option);
            selectOption(userType, option);
            break;
        case 2: //Customer
            printf("\n|*******************************|\n");
            printf("|           Main Menu           |\n");
            printf("|*******************************|\n");
            printf("|    Hello Dear Customer,       |\n");
            printf("|                               |\n");
            printf("| Main Menu Options:            |\n"); //Options can be added and the quit option can easily adapt
            printf("| 1. Reserve Flights            |\n");
            printf("| 2. Cancel Flight Reservation  |\n");
            printf("| 3. Complete Booking           |\n");
            printf("| 4. Quit                       |\n");
            printf("|                               |\n");
            printf("*********************************\n");
            printf("  Please Select an Option: ");
            scanf("%d", &option);
            selectOption(userType, option);
            break;
        }
    } while ((userType == 1 && option != 4) || (userType == 2 && option != 4));//controls the quit option for the respective user

    if(userType == 1 && option == 4) {//This is just giving a message when the user ends the function.
        printf("Dear Admin, thank you for working with us.\nYour services are always appreciated. Have a Great Day!");
    } else if(userType == 2 && option == 4){
        printf("Dear Customer, thank you for booking with us.\nYou are always appreciated here. Have a Great Day!");
    }
}

void selectOption(int userType, int option) {//This function controls the different options that the user is able to pick.
    Flight flights[MAX_FLIGHTS];
    int num_flights = 0;
    if(userType == 1) { //All options for the Admin
        switch (option) {
        case 1:
            printf("Add Flights\n");
            addFlights(flights, &num_flights);
            break;
        case 2:
            printf("Edit Available Flights\n");
            editFlights(flights, &num_flights);
            break;
        case 3: 
            printf("Delete Available Flights\n");
            deleteFlights(flights, &num_flights);
            break;
        }
    }
    if(userType == 2) { //All options for the Customer
        switch (option) {
        case 1:
            printf("Reserve a Flights\n");
            searchFlights(flights, &num_flights);
            break;
        case 2:

            printf("Delete Reserved Flights\n");
            cancelReservations(flights, &num_flights);
            break;
        case 3:
            printf("Complete FLight Booking\n");
            printReceipts(flights, &num_flights);
            break;
        }
    }
}

void addFlights(Flight flights[], int *num_flights) {//This function allows the admin to add flights and save them in the main flights file.
    char filename[] = "flights.txt";
    readFlightsFromFile(flights, num_flights, filename);
    char origin[100];
    char destination[100];
    char typeOfFlight[100];
    int hrs;
    int miles;
    float price;
    char decision[5];

    do
    {
        printf("Enter Flight Origin(Just the first three or two letters in all caps): ");
        scanf("%s", origin);
        printf("Enter Flight Destination (Just the first three or two letters in all caps): ");
        scanf("%s", destination);
        printf("Enter type of flight (Passenger or Cargo): ");
        scanf("%s", typeOfFlight);
        printf("Enter Total Flight Time: ");
        scanf("%d", &hrs);
        printf("Enter Total Flight distance: ");
        scanf("%d", &miles);

        flights[*num_flights].flightId = *num_flights + 1;
        strcpy(flights[*num_flights].origin, origin);
        strcpy(flights[*num_flights].destination, destination); 
        strcpy(flights[*num_flights].typeOfFlight, typeOfFlight);
        flights[*num_flights].hrs = hrs;
        flights[*num_flights].miles = miles;
        price = flights[*num_flights].miles * PRICE_PER_MILE; 
        flights[*num_flights].price = price;
        (*num_flights)++;

        printf("\nDo you wish to add another flight (yes or no): ");
        scanf("%s", decision);

    }   while (strcasecmp(decision, "yes") == 0);

    writeFlightsToFile(flights, num_flights, filename);    
    printFlights(flights, num_flights);
}

void editFlights(Flight flights[], int *num_flights) {//This function allows the admin to edit flights in the main flights file.
    char filename[] = "flights.txt";
    readFlightsFromFile(flights, num_flights, filename);
    printFlights(flights, num_flights);

    int editFlight;

    printf("\nPlease select a Flight id to edit the Flight: ");
    scanf("%d", &editFlight);

    for(int i = 0; i < *num_flights; i++) {
        if(flights[i].flightId == editFlight) {
            char origin[MAX_STR_LEN];
            char destination[100];
            char typeOfFlight[100];
            int hrs;
            int miles;
            float price;

            printf("Enter New FLight Origin (Just the first three or two letters in all caps): ");
            scanf("%s", origin);
            printf("Enter New Flight Destination (Just the first three or two letters in all caps): ");
            scanf("%s", destination);
            printf("Enter type of flight (passenger or cargo): ");
            scanf("%s", typeOfFlight);
            printf("Enter Total Flight Time: ");
            scanf("%d", &hrs);
            printf("Enter Total Flight Distance: ");
            scanf("%d", &miles);

            flights[i].flightId = editFlight;
            strcpy(flights[i].origin, origin);
            strcpy(flights[i].destination, destination); 
            strcpy(flights[i].typeOfFlight, typeOfFlight);
            flights[i].hrs = hrs;
            flights[i].miles = miles;
            price = flights[i].miles * PRICE_PER_MILE; 
            flights[i].price = price;
        }
    }
    printf("\nEdited Flight Table:\n");
    printf("\t\t\t\t\tFLIGHTS\n");
    printFlights(flights, num_flights);
    writeFlightsToFile(flights, num_flights, filename);
}

void deleteFlights(Flight flights[], int *num_flights) {//This function allows the admin to delete flights from the main flights file.
    char filename[] = "flights.txt";
    readFlightsFromFile(flights, num_flights, filename);
    printf("\t\t\t\t\tFLIGHTS\n");
    printFlights(flights, num_flights);
    int delete;
    printf("\nPlease select a Flight id to delete the Flight: ");
    scanf("%d", &delete);

    for(int i = 0; i < *num_flights; i++) {
        if(flights[i].flightId == delete) {
            for(int j = i; j < *num_flights; j++) {
                flights[j].flightId = flights[j].flightId;
                strcpy(flights[j].origin, flights[j+1].origin);
                strcpy(flights[j].destination, flights[j+1].destination); 
                strcpy(flights[j].typeOfFlight, flights[j+1].typeOfFlight);
                flights[j].hrs = flights[j+1].hrs;
                flights[j].miles = flights[j+1].miles;
                flights[j].price = flights[j+1].price;
            }
            *num_flights -= 1;   
        }
    }
    printf("\t\t\t\t\tFLIGHTS\n");
    printFlights(flights, num_flights);
    writeFlightsToFile(flights, num_flights, filename);
}

void searchFlights(Flight flights[], int *num_flights) {//This function is a searching algorithm that narrows down the customers flights.
    char filename[] = "flights.txt";
    readFlightsFromFile(flights, num_flights, filename);

    Flight foundFlights[MAX_FLIGHTS];
    char userOrigin[10];
    char userDest[10];

    printf("We will do our best to find available flights");
    printf("\nEnter preferred place of departure: ");
    scanf("%s", userOrigin);
    printf("Enter your desired destination: ");
    scanf("%s", userDest);

    int num_found_flights = 0;

    for(int i = 0; i < *num_flights; i++) { //searching for flights that match one of the criteria and filling up the found flights array
        if ((strcasecmp(flights[i].origin, userOrigin) == 0) || (strcasecmp(flights[i].destination, userDest) == 0)) {
            foundFlights[num_found_flights].flightId = flights[i].flightId;
            strcpy(foundFlights[num_found_flights].origin, flights[i].origin);
            strcpy(foundFlights[num_found_flights].destination, flights[i].destination);
            strcpy(foundFlights[num_found_flights].typeOfFlight, flights[i].typeOfFlight);
            foundFlights[num_found_flights].hrs = flights[i].hrs;
            foundFlights[num_found_flights].miles = flights[i].miles;
            foundFlights[num_found_flights].price = flights[i].price;
            num_found_flights++;    
        }
    }    
     
    if(num_found_flights > 0) {
        printf("\t\t\t\tAVAILABLE FLIGHTS\n");
        printFlights(foundFlights, &num_found_flights);
    } else {
        printf("We apologize but the Flight you want is not available");
    }

    reserveFlights(flights, num_flights);
}

void reserveFlights(Flight flights[], int *num_flights) {//This function allows the customer to reserve flights for later in their own user flights file.
    char mainFileName[] = "flights.txt";
    Flight reservedFlights[MAX_FLIGHTS];
    int num_reserved_flights = 0;
    int userReserve;
    int currentMaxFlightId = 0;

    char filename[] = "UsersFlights.txt";
    FILE *file = fopen(filename, "r");

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    char line[100];
    while (fgets(line, sizeof(line), file) != NULL) {
        currentMaxFlightId++;
    }
    fclose(file);

    char decision[5];
    printf("Are the flights shown convenient for you (yes or no): ");
    scanf("%s", decision);

    if(strcasecmp(decision, "yes") == 0) {
        printf("Enter ID of flight that you want to reserve: ");
        scanf("%d", &userReserve);

        for(int i = 0; i < *num_flights; i++) {
            if(flights[i].flightId == userReserve) {
                reservedFlights[num_reserved_flights].flightId = currentMaxFlightId + 1;
                strcpy(reservedFlights[num_reserved_flights].origin, flights[i].origin);
                strcpy(reservedFlights[num_reserved_flights].destination, flights[i].destination); 
                strcpy(reservedFlights[num_reserved_flights].typeOfFlight, flights[i].typeOfFlight);
                reservedFlights[num_reserved_flights].hrs = flights[i].hrs;
                reservedFlights[num_reserved_flights].miles = flights[i].miles;
                reservedFlights[num_reserved_flights].price = flights[i].price;
                num_reserved_flights += 1;
                for(int j = i; j < *num_flights; j++) {
                        flights[j].flightId = flights[j].flightId;
                        strcpy(flights[j].origin, flights[j+1].origin);
                        strcpy(flights[j].destination, flights[j+1].destination); 
                        strcpy(flights[j].typeOfFlight, flights[j+1].typeOfFlight);
                        flights[j].hrs = flights[j+1].hrs;
                        flights[j].miles = flights[j+1].miles;
                        flights[j].price = flights[j+1].price;
                    }
                    *num_flights -= 1;
            }
        }
    } else if(strcasecmp(decision, "no") == 0) {
        printf("We apologize but your desired flight is unavailable");
        return;
    }

    appendFlightsToFile(reservedFlights, &num_reserved_flights, filename);
    num_reserved_flights = 0;
    readFlightsFromFile(reservedFlights, &num_reserved_flights, filename);
    printf("\t\t\t\tRESERVED FLIGHTS\n");
    printFlights(reservedFlights, &num_reserved_flights);
    writeFlightsToFile(flights, num_flights, mainFileName);
}

void cancelReservations(Flight flights[], int *num_flights) {//This function allows the user to cancel reservations.
    char mainFileName[] = "flights.txt";
    char filename[] = "UsersFlights.txt";
    Flight mainFlight[1];
    readFlightsFromFile(flights, num_flights, filename);
    printf("\t\t\t\tRESERVED FLIGHTS\n");
    printFlights(flights, num_flights);

    int currentMaxFlightId = 0;
    int num_main_flight = 1;

    FILE *file = fopen(mainFileName, "r");

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    char line[100];
    while (fgets(line, sizeof(line), file) != NULL) {
        currentMaxFlightId++;
    }
    fclose(file);

    char decision[10];
    int delete;

    printf("\nAre you sure you want to cancel one of your flight reservations (yes or no): ");
    scanf("%s", decision);

    if(strcasecmp(decision, "yes") == 0) {
        printf("Select Flight Id to cancel: ");
        scanf("%d", &delete);
        for(int i = 0; i < *num_flights; i++) {//This deletes the reserved flight from the user file and returns the flight back to the main flights file.
            if(flights[i].flightId == delete) {
                mainFlight[0].flightId = currentMaxFlightId + 1;
                strcpy(mainFlight[0].origin, flights[i].origin);
                strcpy(mainFlight[0].destination, flights[i].destination); 
                strcpy(mainFlight[0].typeOfFlight, flights[i].typeOfFlight);
                mainFlight[0].hrs = flights[i].hrs;
                mainFlight[0].miles = flights[i].miles;
                mainFlight[0].price = flights[i].price;
                for(int j = i; j < *num_flights; j++) {
                    flights[j].flightId = flights[j].flightId;
                    strcpy(flights[j].origin, flights[j+1].origin);
                    strcpy(flights[j].destination, flights[j+1].destination); 
                    strcpy(flights[j].typeOfFlight, flights[j+1].typeOfFlight);
                    flights[j].hrs = flights[j+1].hrs;
                    flights[j].miles = flights[j+1].miles;
                    flights[j].price = flights[j+1].price;
                }
                *num_flights -= 1;
            }
        }
    }
    printf("\t\t\t\tRESERVED FLIGHTS\n");
    printFlights(flights, num_flights);
    writeFlightsToFile(flights, num_flights, filename);
    appendFlightsToFile(mainFlight, &num_main_flight, mainFileName);
}

void printReceipts(Flight flights[], int *num_flights) {
    char filename[] = "UsersFlights.txt";
    readFlightsFromFile(flights, num_flights, filename);
    printFlights(flights, num_flights);

    int confirmedFlight[MAX_FLIGHTS];
    
}

void readFlightsFromFile(Flight flights[], int *num_flights, char filename[]) {//This function reads the flights from whatever flight file the user wishes
    FILE *file = fopen(filename, "r");

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    char line[MAX_STR_LEN * 7]; //It is multiplied by the number of items in a line
    //The rest of this block breaks the line into different parts and puts them in flight array
    while (fgets(line, sizeof(line), file) != NULL && *num_flights < MAX_FLIGHTS) {
        char *token = strtok(line, ", ");
        flights[*num_flights].flightId = atoi(token);
        token = strtok(NULL, ", ");
        strncpy(flights[*num_flights].origin, token, MAX_STR_LEN - 1);
        token = strtok(NULL, ", ");
        strncpy(flights[*num_flights].destination, token, MAX_STR_LEN - 1);
        token = strtok(NULL, ", ");
        strncpy(flights[*num_flights].typeOfFlight, token, MAX_STR_LEN - 1);
        token = strtok(NULL, ", ");
        flights[*num_flights].hrs = atoi(token);
        token = strtok(NULL, ", ");
        flights[*num_flights].miles = atoi(token);
        token = strtok(NULL, ", ");
        flights[*num_flights].price = atof(token);
        (*num_flights)++;
    }
    fclose(file);
}

void writeFlightsToFile(Flight flights[], int *num_flights, char filename[]) {//This function saves flights to whatever flight file the user defines
    FILE *file = fopen(filename, "w");

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    for (int i = 0; i < *num_flights; i++) {
        fprintf(file, "%d, %s, %s, %s, %d, %d, %.2f\n",flights[i].flightId , flights[i].origin ,flights[i].destination, flights[i].typeOfFlight, flights[i].hrs, flights[i].miles, flights[i].price);
    }
    fclose(file);
}

void appendFlightsToFile(Flight flights[], int *num_flights, char filename[]) {//This function saves flights to whatever flight file the user defines without re writing the file
    FILE *file = fopen(filename, "a");

    if (file == NULL) {
        printf("Error opening file %s.\n", filename);
        exit(1);
    }

    for (int i = 0; i < *num_flights; i++) {
        fprintf(file, "%d, %s, %s, %s, %d, %d, %.2f\n", flights[i].flightId, flights[i].origin, flights[i].destination, flights[i].typeOfFlight, flights[i].hrs, flights[i].miles, flights[i].price);
    }
    fclose(file);
}

void printFlights(Flight flights[], int *num_flights) {//This function printf the flights of what ever file the user is currently in aa a table.
    printf("|---------------------------------------------------------------------------------------|\n");
    printf("| Id\t|   Origin\t|  Destination  |  Flight Type\t| Hours\t| Miles\t| Price\t\t|\n");
    printf("|-------|---------------|---------------|---------------|-------|-------|---------------|\n");
    for(int i = 0; i < *num_flights; i++) {
        printf("| %d\t|   %s\t\t|   %s\t\t|  %s\t| %d\t| %d\t| $%.2f\t|\n", flights[i].flightId,  flights[i].origin, flights[i].destination, flights[i].typeOfFlight, flights[i].hrs, flights[i].miles, flights[i].price);
    }
    printf("|---------------------------------------------------------------------------------------|\n");
}


/* Potential List: Agent
2. consider a function that allows agent to delete a user reserved flight.
3. add a thing that converts the agents input into capital letters for destination and origin
*/

/* Potential List: customer

*/
